#CD pipeline for dfa api
name: cd-dfae-project-landing-page

on:
  workflow_dispatch:
    inputs:
      environment:
       required: true
       default: 'dev'
       description: Please select the environment for Landing Page
       type: Choice
       options:
       - dev
       - test
       - training
       - prod

env:
  IMAGE_NAME: dfa-landing-page
  WORKING_DIRECTORY: ./landing-page/src
  INDEX_FILE: index.html

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Set working directory
        id: LandingDir
        run: |
          if [[ "${{ github.event.inputs.environment }}" -eq "dev" ]];then
              echo "::set-output name=Landing_INDEX_FILE::project-dev.html"
          elif [[ "${{ github.event.inputs.environment }}" -eq "test" ]];then
              echo "::set-output name=Landing_INDEX_FILE::project-test.html"
          elif [[ "${{ github.event.inputs.environment }}" -eq "training" ]];then
              echo "::set-output name=Landing_INDEX_FILE::project-training.html"
          elif [[ "${{ github.event.inputs.environment }}" -eq "prod" ]];then
              echo "::set-output name=Landing_INDEX_FILE::prod-index.html"
          fi

      - uses: actions/checkout@v3

      - name: Log into registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_PROJECT_REGISTRY }}
          username: ${{ secrets.DOCKER_PROJECT_USERNAME }}
          password: ${{ secrets.DOCKER_PROJECT_PASSWORD_BUILDER }}

      - name: Set the index page according to the environment
        working-directory: ${{env.WORKING_DIRECTORY}}
        run: |
          cd html
          mv ${{steps.LandingDir.outputs.Landing_INDEX_FILE}} ${{env.INDEX_FILE}}
          ls -ltr
          cat index.html |grep  "link-light-blue register-dfa-link"


#      - name: Build Image
#        working-directory: ${{env.WORKING_DIRECTORY}}
#        run: |
#          docker build -t ${{env.IMAGE_NAME}} .
#
#      - name: Tag Image
#        run: |
#          docker tag ${{env.IMAGE_NAME}} ${{ secrets.DOCKER_PROJECT_REGISTRY }}/${{env.IMAGE_NAME}}:dev
#
#      - name: Docker Push
#        run: |
#          docker push ${{ secrets.DOCKER_PROJECT_REGISTRY }}/${{env.IMAGE_NAME}}:dev
#
#      - name: Checkout ArgoCD Repo
#        id: gitops
#        uses: actions/checkout@v4
#        with:
#          repository: bcgov-c/tenant-gitops-c2ee1a
#          ref: main
#          token: ${{ secrets.GITOPS_KEY }} # `GH_PAT` is a secret that contains your PAT
#          path: gitops
#
#      - name: Update Helm values in gitops
#        id: helm
#        if: steps.gitops.outcome == 'success'  # Only run if the previous step (publish) was successful
#        run: |
#          # Clone the GitOps deployment configuration repository
#          # Navigate to the directory containing your Helm values file for the environment develop -> DEV, test -> test and
#          cd gitops/charts
#
#          # Update the Helm values file with the new image tag and version
#          DATETIME=$(date +'%Y-%m-%d %H:%M:%S')  # Get current date and time
#
#          sed -i  "s/landingtag: .*/landingtag: dev # Image Updated on $DATETIME/" ../deploy/dev_values.yaml
#          sed -i  "s/landingtag: .*/landingtag: dev # Image Updated on $DATETIME/"  dfa-portal-landing-page/values.yaml
#
#          # Commit and push the changes
#          git config --global user.email "actions@github.com"
#          git config --global user.name "GitHub Actions"
#
#          git add .
#
#          git add ../deploy/dev_values.yaml
#
#          # Repackage Helm Chart
#
#          cd dfa-gitops
#
#          helm dependency build
#
#          cd charts
#
#          git add .
#
#          git commit -m "Update Dev Landing image tag"
#          git push origin main  # Update the branch name as needed